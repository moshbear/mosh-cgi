// Cookies demo
// Refactoring will be done during the Great Merge (of this and mosh-fcgi)

/*
 *  Copyright (C) 1996 - 2004 Stephen F. Booth <sbooth@gnu.org>
 *                       2007 Sebastien DIAZ <sebastien.diaz@gmail.com>
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110, USA
 */

/*! \file cookie.cpp
 * \brief HTTP cookie demo
 *
 * Tests and demonstrates how to use the HTTPCookie class
 */

#include <string>
#include <vector>
#include <sstream>
#include <stdexcept>
#include <iomanip>
#include <iostream>
#include <cstdlib>

extern "C" {
#include <sys/utsname.h>
#include <sys/time.h>
}

#include <mosh/cgi/http/header.hpp>
#include <mosh/cgi/html/element.hpp>
#include <mosh/cgi/html/element/s.hpp>

#include "styles.h"

using namespace std;
using namespace MOSH_CGI;
using namespace html;
using namespace html::element;

// Print the form for this CGI
string printForm() {

	return s::form( {s::P("method", "post"), s::P("action", "foo")}, {
		s::table({
			s::tr({
				s::td(s::P("class", "title"), "Cookie Name"),
				s::td(s::P("class", "form"), s::input({s::P("type", "text"), s::P("name", "name")}))
			}),
			s::tr({
				s::td(s::P("class", "title"), "Cookie Value"),
				s::td(s::P("class", "form"), s::input({s::P("type", "text"), s::P("name", "value")}))
			})
		}),
		s::div(s::P("class", "center"),
			s::p({
				s::input({s::P("type", "submit"), s::P("name", "submit"), s::P("value", "Set the cookie")}),
				s::input({s::P("type", "reset"), s::P("value", "nevermind")})
			})
		)
	});

}

// Main Street, USA
int main() {
	using namespace http;
	timeval start;
	gettimeofday(&start, NULL);
	string name;
	string value;
	// Output the headers for an HTML document with the cookie only
	// if the cookie is not empty
	{
		header::Header h = header::status(420) + header::content_type("text/xhtml+xml");
		if (name != "" && value != "")
			h += header::P(name, value);
		cout << h;
	}
	// Output the HTML 4.0 DTD info
	cout << s::html_begin()({
		s::P("lang", "en"),
		s::P("dir", "ltr")
	});
	// Set up the page's header and title.
	cout << s::head( {
		s::style(s::P("type", "text/css"), styles),
		s::title("mosh-cgi cookie")
	});
	cout << s::body_begin();
	cout << s::h1(S("mosh") + (std::string)s::span(s::P("class", "red"), "-cgi"))
		+ S("HTTP Cookies Test Results");
	cout << s::comment("This page generated by mosh-cgi for $ENV[HTTP_REMOTE_HOST]");
	cout << s::h4(S("Thanks for using mosh") + (std::string)s::span(s::P("class", "red"), "-cgi")) + S(" $ENV[HTTP_REMOTE_HOST]($ENV[HTTP_REMOTE_ADDR])!");
	if (name != "" && value != "")
		cout << s::p({ "A cookie with the name ", s::em(name), " and value ", s::em(value), "was set. ", s::br,
					   "In order for the cookie to show up here you must ",
					   s::a(s::P("href", "$ENV[HTTP_SCRIPT_NAME]"), "refresh")
			});
	// Show the cookie info from the environment
	cout << s::h2("Cookie Information from the Environment");
	cout << s::div(s::P("align", "center"),
	s::table(s::tr({
		s::td(s::P("class", "title"), "cookie"),
		s::td(s::P("class", "data"), "$ENV[HTTP_COOKIE]")
	})));
#if 0
	// Show the cookie info from the cookie list
	cout << h2("HTTP Cookies via vector") << endl;
	
	{
		s::Element _t = s::table();
		_t += s::tr(s::P("class", "title"), {
				s::td("Cookie Name"),
				s::td("Cookie Value")
			});
			

		
	// Iterate through the vector, and print out each value
	for (const auto& e : env.cookies) {
		for (const auto& f : e) {
			_t += s::tr(s::P("class", "data"), {
					s::td(e.first)
					s::tr(f.value)
				});
		}
	}
	cout << s::div(_t);
#endif

	
	// Print out the form to do it again
	cout << s::br << endl;
	printForm();
	cout << s::hr(s::P("class", "half")) << endl;

	
	// Information on this query
	timeval end;
	gettimeofday(&end, NULL);
	string _s;
	{
		stringstream ss;
		ss << (end.tv_sec - start.tv_sec) << " s ";
		ss << setw(6) << setfill('0') << (end.tv_usec - start.tv_usec) << " us";
		_s = ss.str();
	}
	cout << s::p("Total time for request = " + _s);
	cout << s::body_end();
	cout << s::html_end();
	cout << endl;
}
